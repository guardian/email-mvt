Parameters:
  Stage:
    Type: String
    Default: CODE
    AllowedValues:
      - CODE
      - PROD
Resources:
  EmailMVTLogArchiverArchiveS3BucketB7DAF378:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName:
        Fn::Join:
          - ""
          - - archive-
            - Fn::ImportValue:
                Fn::Join:
                  - ""
                  - - EmailMVTPixel-Logs-S3Bucket-
                    - Ref: Stage
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 2
            ExpirationInDays: 912
            Status: Enabled
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: EmailMVTLogArchiverStack/EmailMVTLogArchiver/ArchiveS3Bucket/Resource
  EmailMVTLogArchiverServiceRole3E0B7412:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - lambda.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: EmailMVTLogArchiverStack/EmailMVTLogArchiver/Archiver/ServiceRole/Resource
  EmailMVTLogArchiverServiceRoleDefaultPolicy2B34FF4D:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: logs:CreateLogGroup
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:log-group:/aws/lambda/EmailMVTLogArchiver:*
          - Action:
              - s3:GetObject
              - s3:ListBucket
            Effect: Allow
            Resource:
              - Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - Fn::ImportValue:
                        Fn::Join:
                          - ""
                          - - EmailMVTPixel-Logs-S3Bucket-
                            - Ref: Stage
              - Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - Fn::ImportValue:
                        Fn::Join:
                          - ""
                          - - EmailMVTPixel-Logs-S3Bucket-
                            - Ref: Stage
                    - /*
          - Action: s3:PutObject
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - arn:aws:s3:::archive-
                  - Fn::ImportValue:
                      Fn::Join:
                        - ""
                        - - EmailMVTPixel-Logs-S3Bucket-
                          - Ref: Stage
                  - /*
        Version: "2012-10-17"
      PolicyName: EmailMVTLogArchiverServiceRoleDefaultPolicy2B34FF4D
      Roles:
        - Ref: EmailMVTLogArchiverServiceRole3E0B7412
    Metadata:
      aws:cdk:path: EmailMVTLogArchiverStack/EmailMVTLogArchiver/Archiver/ServiceRole/DefaultPolicy/Resource
  EmailMVTLogArchiver1564C123:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const aws = require('aws-sdk');

          const s3 = new aws.S3();

          exports.handler = async () => {
            const listResponse = await s3.listObjectsV2({ Bucket: process.env.source_s3_bucket }).promise();
            const relevantObjects = listResponse.Contents.filter(obj => !/\//.test(obj.Key));
            const objectsWithDesiredFolder = relevantObjects.map(s3object => {
              const year = '' + s3object.LastModified.getFullYear();
              const month = '' + (s3object.LastModified.getMonth()+1);
              const day = '' + s3object.LastModified.getDate();
              return [s3object.Key].concat(`${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`);
            });
            const promises = objectsWithDesiredFolder.map(tuple => {
              const [source, destinationFolder] = tuple;
              return s3.copyObject({
                Bucket: `${process.env.destination_s3_bucket}/dt=${destinationFolder}`,
                CopySource: `${process.env.source_s3_bucket}/${source}`,
                Key: source
              }).promise();
            });
            const results = await Promise.all(promises);
            console.log(`Completed function. Partitioned ${results.length} objects. Returning results`);
            return `Partitioned ${results.length} objects`;
          };
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - EmailMVTLogArchiverServiceRole3E0B7412
          - Arn
      Runtime: nodejs8.10
      Environment:
        Variables:
          source_s3_bucket:
            Fn::ImportValue:
              Fn::Join:
                - ""
                - - EmailMVTPixel-Logs-S3Bucket-
                  - Ref: Stage
          destination_s3_bucket:
            Ref: EmailMVTLogArchiverArchiveS3BucketB7DAF378
      FunctionName:
        Fn::Join:
          - ""
          - - EmailMVTLogArchiver-
            - Ref: Stage
    DependsOn:
      - EmailMVTLogArchiverServiceRoleDefaultPolicy2B34FF4D
      - EmailMVTLogArchiverServiceRole3E0B7412
    Metadata:
      aws:cdk:path: EmailMVTLogArchiverStack/EmailMVTLogArchiver/Archiver/Resource
  EmailMVTLogArchiverAllowEventRuleEmailMVTLogArchiverStackEmailMVTLogArchiverRuleD2670257804EEBEC:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - EmailMVTLogArchiver1564C123
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - EmailMVTLogArchiverRuleED22675D
          - Arn
    Metadata:
      aws:cdk:path: EmailMVTLogArchiverStack/EmailMVTLogArchiver/Archiver/AllowEventRuleEmailMVTLogArchiverStackEmailMVTLogArchiverRuleD2670257
  EmailMVTLogArchiverRuleED22675D:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: cron(0 1 ? * * *)
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - EmailMVTLogArchiver1564C123
              - Arn
          Id: Target0
          Input: "{}"
    Metadata:
      aws:cdk:path: EmailMVTLogArchiverStack/EmailMVTLogArchiver/Rule/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=1.4.0,@aws-cdk/assets=1.4.0,@aws-cdk/aws-applicationautoscaling=1.4.0,@aws-cdk/aws-autoscaling=1.4.0,@aws-cdk/aws-autoscaling-common=1.4.0,@aws-cdk/aws-autoscaling-hooktargets=1.4.0,@aws-cdk/aws-cloudformation=1.4.0,@aws-cdk/aws-cloudfront=1.4.0,@aws-cdk/aws-cloudwatch=1.4.0,@aws-cdk/aws-ec2=1.4.0,@aws-cdk/aws-ecr=1.4.0,@aws-cdk/aws-ecr-assets=1.4.0,@aws-cdk/aws-ecs=1.4.0,@aws-cdk/aws-elasticloadbalancingv2=1.4.0,@aws-cdk/aws-events=1.4.0,@aws-cdk/aws-events-targets=1.4.0,@aws-cdk/aws-iam=1.4.0,@aws-cdk/aws-kms=1.4.0,@aws-cdk/aws-lambda=1.4.0,@aws-cdk/aws-logs=1.4.0,@aws-cdk/aws-route53=1.4.0,@aws-cdk/aws-route53-targets=1.4.0,@aws-cdk/aws-s3=1.4.0,@aws-cdk/aws-s3-assets=1.4.0,@aws-cdk/aws-servicediscovery=1.4.0,@aws-cdk/aws-sns=1.4.0,@aws-cdk/aws-sns-subscriptions=1.4.0,@aws-cdk/aws-sqs=1.4.0,@aws-cdk/aws-ssm=1.4.0,@aws-cdk/core=1.4.0,@aws-cdk/custom-resources=1.4.0,@aws-cdk/cx-api=1.4.0,@aws-cdk/region-info=1.4.0,jsii-runtime=node.js/v8.11.1

